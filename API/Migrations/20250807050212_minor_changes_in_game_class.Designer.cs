// <auto-generated />
using System;
using At.luki0606.DartZone.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace At.luki0606.DartZone.API.Migrations
{
    [DbContext(typeof(DartZoneDbContext))]
    [Migration("20250807050212_minor_changes_in_game_class")]
    partial class minor_changes_in_game_class
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("At.luki0606.DartZone.API.Models.Dart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Field")
                        .HasColumnType("integer");

                    b.Property<int>("Multiplier")
                        .HasColumnType("integer");

                    b.Property<Guid>("ThrowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ThrowId");

                    b.ToTable("Darts");
                });

            modelBuilder.Entity("At.luki0606.DartZone.API.Models.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentScore")
                        .HasColumnType("integer");

                    b.Property<bool>("HasFinished")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasStarted")
                        .HasColumnType("boolean");

                    b.Property<int>("StartScore")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("At.luki0606.DartZone.API.Models.Throw", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Throws");
                });

            modelBuilder.Entity("At.luki0606.DartZone.API.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("At.luki0606.DartZone.API.Models.Dart", b =>
                {
                    b.HasOne("At.luki0606.DartZone.API.Models.Throw", "Throw")
                        .WithMany("Darts")
                        .HasForeignKey("ThrowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Throw");
                });

            modelBuilder.Entity("At.luki0606.DartZone.API.Models.Game", b =>
                {
                    b.HasOne("At.luki0606.DartZone.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("At.luki0606.DartZone.API.Models.Throw", b =>
                {
                    b.HasOne("At.luki0606.DartZone.API.Models.Game", "Game")
                        .WithMany("Throws")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("At.luki0606.DartZone.API.Models.Game", b =>
                {
                    b.Navigation("Throws");
                });

            modelBuilder.Entity("At.luki0606.DartZone.API.Models.Throw", b =>
                {
                    b.Navigation("Darts");
                });
#pragma warning restore 612, 618
        }
    }
}
